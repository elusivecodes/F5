{"version":3,"names":["Path","constructor","context","this","_context","_path","Path2D","_hasVertex","_bounding","top","Number","POSITIVE_INFINITY","right","NEGATIVE_INFINITY","bottom","left","containsPoint","x","y","isPointInPath","getBoundingBox","width","height","render","options","lineWidth","Math","max","canvas","document","createElement","getContext","setAttribute","Object","assign","translate","fillStyle","fill","strokeStyle","stroke","_setBounds","xs","ys","min","parseVector","Vector","add","other","angleTo","getHeading","clone","distTo","hypot","div","dot","atan2","getMag","limit","mag","setMag","mult","normalize","rotate","angle","cos","sin","setHeading","sub","create","random","Shape","anchorX","anchorY","layers","anchor","rotatedPoint","pointInShape","contour","path","callback","layer","bounding","bounds","rotated1","_rotatePoint","rotated2","rotated3","rotated4","push","length","layerOptions","layerX","layerY","globalCompositeOperation","layerCanvas","drawImage","CanvasContext","node","_node","_options","defaults","_states","resize","applyMatrix","a","b","c","d","e","f","transform","background","color","noStroke","rect","pop","clear","clearRect","createShape","createPath","image","drawPath","drawShape","shape","shapeX","shapeY","erase","reset","getImage","sx","sy","sw","sh","getImageData","restore","save","putImage","dx","dy","dirtyX","dirtyY","dirtyWidth","dirtyHeight","arguments","putImageData","resetMatrix","resetTransform","w","h","scale","undefined","font","fontSize","fontWeight","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","proto","prototype","arc","radius","startAngle","endAngle","begin","end","beginPath","bezier","x1","y1","cx1","cy1","cx2","cy2","x2","y2","vertex","bezierVertex","bezierCurveTo","circle","ellipse","curve","curveVertex","arcTo","PI","close","closePath","_draw","size","weight","line","linearGradient","createLinearGradient","noFill","noShadow","point","quad","x3","y3","x4","y4","quadraticVertex","cx","cy","quadraticCurveTo","radialGradient","r1","r2","createRadialGradient","shadow","amount","shadowOffset","square","strokeWidth","text","_updateContext","join","textAlign","fillText","strokeText","aligment","triangle","lineTo","moveTo","xRadius","yRadius","_loop","_mouseX","_mouseY","_mouseDown","_keysDown","style","setProperty","_events","setup","start","Date","now","run","_","delta","update","window","requestAnimationFrame","isKeyPressed","code","keys","isMousePressed","button","mousePos","noLoop","onKeyDown","onKeyPress","onKeyUp","onMouseClick","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseUp","updateMouse","offsetX","offsetY","addEventListener","once","attach","parent","body","append"],"sources":["../src/path/path.js","../src/vector/helpers.js","../src/vector/vector.js","../src/shape/shape.js","../src/canvas-context/canvas-context.js","../src/canvas-context/index.js","../src/canvas-context/prototype/primitive.js","../src/canvas-context/prototype/path.js","../src/canvas-context/prototype/draw.js","../src/canvas-context/prototype/gradient.js","../src/path/index.js","../src/path/prototype/primitive.js","../src/path/prototype/path.js","../src/canvas/canvas.js"],"sourcesContent":["/**\n * Path\n */\nexport default class Path {\n    /**\n     * New Path constructor.\n     * @param {CanvasRenderingContext2D} context The canvas context.\n     */\n    constructor(context) {\n        this._context = context;\n\n        this._path = new Path2D();\n        this._hasVertex = false;\n\n        this._bounding = {\n            top: Number.POSITIVE_INFINITY,\n            right: Number.NEGATIVE_INFINITY,\n            bottom: Number.NEGATIVE_INFINITY,\n            left: Number.POSITIVE_INFINITY,\n        };\n    }\n\n    /**\n     * Determine if the path contains a point.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {Boolean} TRUE if the path contains the point, otherwise FALSE.\n     */\n    containsPoint(x, y) {\n        return this._context.isPointInPath(this._path, x, y);\n    }\n\n    /**\n     * Get the bounding box of the path.\n     * @return {object} The bounding box.\n     */\n    getBoundingBox() {\n        return {\n            top: this._bounding.top,\n            right: this._bounding.right,\n            bottom: this._bounding.bottom,\n            left: this._bounding.left,\n            x: this._bounding.left,\n            y: this._bounding.top,\n            width: this._bounding.right - this._bounding.left,\n            height: this._bounding.bottom - this._bounding.top,\n        };\n    }\n\n    /**\n     * Render the path.\n     * @param {object} options The rendering options.\n     * @return {HTMLCanvasElement} The rendered canvas.\n     */\n    render(options = {}) {\n        let { width, height, x, y } = this.getBoundingBox();\n\n        const lineWidth = Math.max(options.lineWidth, 0);\n\n        if (lineWidth) {\n            width += lineWidth * 2;\n            height += lineWidth * 2;\n            x -= lineWidth;\n            y -= lineWidth;\n        }\n\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n\n        canvas.setAttribute('width', width);\n        canvas.setAttribute('height', height);\n\n        Object.assign(context, options);\n\n        context.translate(-x, -y);\n\n        if (options.fillStyle) {\n            context.fill(this._path);\n        }\n\n        if (options.strokeStyle) {\n            context.stroke(this._path);\n        }\n\n        return canvas;\n    }\n\n    /**\n     * Set the path bounds.\n     * @param {Array} xs The X co-ordinates.\n     * @param {Array} ys The Y co-ordinates.\n     */\n    _setBounds(xs, ys) {\n        this._bounding.top = Math.min(this._bounding.top, ...ys);\n        this._bounding.right = Math.max(this._bounding.right, ...xs);\n        this._bounding.bottom = Math.max(this._bounding.bottom, ...ys);\n        this._bounding.left = Math.min(this._bounding.left, ...xs);\n    }\n}\n","import Vector from './vector.js';\n\n/**\n * Parse a Vector or X/Y co-ordinates.\n * @param {Vector|number} x A Vector, or the X position.\n * @param {number} [y] The Y position.\n * @return {Vector} The new Vector.\n */\nexport function parseVector(x, y) {\n    if (x instanceof Vector) {\n        return x;\n    }\n\n    return new Vector(x, y);\n};\n","import { parseVector } from './helpers.js';\n\n/**\n * Vector\n */\nexport default class Vector {\n    /**\n     * New Vector constructor.\n     * @param {number} [x=0] The X position.\n     * @param {number} [y=0] The Y position.\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Add another Vector to the Vector.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {Vector} The Vector.\n     */\n    add(x, y) {\n        const other = parseVector(x, y);\n\n        this.x += other.x;\n        this.y += other.y;\n\n        return this;\n    }\n\n    /**\n     * Calculate the angle to another Vector.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {number} The angle to the other Vector.\n     */\n    angleTo(x, y) {\n        const other = parseVector(x, y);\n\n        return other.getHeading() - this.getHeading();\n    };\n\n    /**\n     * Clone the Vector.\n     * @return {Vector} A new Vector.\n     */\n    clone() {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     * Calculate the distance to another Vector.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {number} The distance to the other Vector.\n     */\n    distTo(x, y) {\n        const other = parseVector(x, y);\n\n        return Math.hypot(other.x - this.x, other.y - this.y);\n    }\n\n    /**\n     * Divide the Vector by another.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {Vector} The Vector.\n     */\n    div(x, y) {\n        const other = parseVector(x, y);\n\n        this.x /= other.x;\n        this.y /= other.y;\n\n        return this;\n    }\n\n    /**\n     * Perform a dot product multiplication of the Vector with another.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {Vector} The Vector.\n     */\n    dot(x, y) {\n        const other = parseVector(x, y);\n\n        this.x *= other.y;\n        this.y *= other.x;\n\n        return this;\n    }\n\n    /**\n     * Get the angle of the Vector.\n     * @return {number} The angle.\n     */\n    getHeading() {\n        return Math.atan2(this.y, this.x);\n    }\n\n    /**\n     * Get the magnitude of the Vector.\n     * @return {number} The magnitude.\n     */\n    getMag() {\n        return Math.hypot(this.x, this.y);\n    }\n\n    /**\n     * Limit the Vector magnitude.\n     * @param {number} mag The magnitude.\n     * @return {Vector} The Vector.\n     */\n    limit(mag) {\n        if (this.getMag() <= mag) {\n            return this;\n        }\n\n        return this.setMag(mag);\n    }\n\n    /**\n     * Multiply the Vector by another.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {Vector} The Vector.\n     */\n    mult(x, y) {\n        const other = parseVector(x, y);\n\n        this.x *= other.x;\n        this.y *= other.y;\n\n        return this;\n    }\n\n    /**\n     * Normalize the Vector magnitude.\n     * @return {Vector} The Vector.\n     */\n    normalize() {\n        return this.setMag(1);\n    }\n\n    /**\n     * Rotate the Vector.\n     * @param {number} angle The angle.\n     * @return {Vector} The Vector.\n     */\n    rotate(angle) {\n        angle += this.getHeading();\n\n        const mag = this.getMag();\n\n        this.x = Math.cos(angle) * mag;\n        this.y = Math.sin(angle) * mag;\n\n        return this;\n    }\n\n    /**\n     * Set the angle of the Vector.\n     * @param {number} angle The angle.\n     * @return {Vector} The Vector.\n     */\n    setHeading(angle) {\n        const mag = this.getMag();\n\n        this.x = Math.cos(angle) * mag;\n        this.y = Math.sin(angle) * mag;\n\n        return this;\n    }\n\n    /**\n     * Set the magnitude of the Vector.\n     * @param {number} mag The magnitude.\n     * @return {Vector} The Vector.\n     */\n    setMag(mag) {\n        const angle = this.getHeading();\n\n        this.x = Math.cos(angle) * mag;\n        this.y = Math.sin(angle) * mag;\n\n        return this;\n    }\n\n    /**\n     * Subtract another Vector from the Vector.\n     * @param {Vector|number} x The other Vector, or the X position.\n     * @param {number} [y] The Y position.\n     * @return {Vector} The Vector.\n     */\n    sub(x, y) {\n        const other = parseVector(x, y);\n\n        this.x -= other.x;\n        this.y -= other.y;\n\n        return this;\n    }\n\n    /**\n     * Create a new Vector.\n     * @param {number} [x=0] The X position.\n     * @param {number} [y=0] The Y position.\n     * @return {Vector} A new Vector object.\n     */\n    static create(x = 0, y = 0) {\n        return new this(x, y);\n    }\n\n    /**\n     * Create a random Vector.\n     * @return {Vector} A new Vector object.\n     */\n    static random() {\n        return new this(Math.random(), Math.random());\n    }\n}\n","import Path from './../path/path.js';\nimport Vector from './../vector/vector.js';\n\n/**\n * Shape\n */\nexport default class Shape {\n    /**\n     * New Shape constructor.\n     * @param {CanvasRenderingContext2D} context The canvas context.\n     * @param {number} [x=0] The global X position.\n     * @param {number} [y=0] The global Y position.\n     * @param {number} [angle=0] The rotation angle.\n     * @param {number} [anchorX=0] The anchor X position.\n     * @param {number} [anchorY=0] The anchor Y position.\n     */\n    constructor(context, x = 0, y = 0, angle = 0, anchorX = 0, anchorY = 0) {\n        this._context = context;\n\n        this.x = x;\n        this.y = y;\n        this.angle = angle;\n        this.anchorX = anchorX;\n        this.anchorY = anchorY;\n\n        this.layers = [];\n    }\n\n    /**\n     * Determine if the shape contains a point.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {Boolean} TRUE if the shape contains the point, otherwise FALSE.\n     */\n    containsPoint(x, y) {\n        const anchor = Vector.create(this.x + this.anchorX, this.y + this.anchorY);\n\n        const rotatedPoint = Vector.create(x, y)\n            .sub(anchor)\n            .rotate(-this.angle)\n            .add(anchor);\n\n        let pointInShape = false;\n\n        for (const { contour, path } of this.layers) {\n            if (\n                (pointInShape && !contour) ||\n                (!pointInShape && contour) ||\n                !path.containsPoint(rotatedPoint.x - this.x, rotatedPoint.y - this.y)\n            ) {\n                continue;\n            }\n\n            pointInShape = !pointInShape;\n        }\n\n        return pointInShape;\n    }\n\n    /**\n     * Add a contour to the shape.\n     * @param {callback} callback The callback to generate the path.\n     * @return {Shape} The Shape.\n     */\n    contour(callback) {\n        return this.layer(callback, true);\n    }\n\n    /**\n     * Get the bounding box of the shape.\n     * @return {object} The bounding box.\n     */\n    getBoundingBox() {\n        const bounding = {\n            top: Number.POSITIVE_INFINITY,\n            right: Number.NEGATIVE_INFINITY,\n            bottom: Number.NEGATIVE_INFINITY,\n            left: Number.POSITIVE_INFINITY,\n        };\n\n        for (const layer of this.layers) {\n            if (layer.contour) {\n                continue;\n            }\n\n            const bounds = layer.path.getBoundingBox();\n            const rotated1 = this._rotatePoint(bounds.right, bounds.top);\n            const rotated2 = this._rotatePoint(bounds.right, bounds.bottom);\n            const rotated3 = this._rotatePoint(bounds.left, bounds.bottom);\n            const rotated4 = this._rotatePoint(bounds.left, bounds.top);\n\n            bounding.top = Math.min(bounding.top, rotated1.y, rotated2.y, rotated3.y, rotated4.y);\n            bounding.right = Math.max(bounding.right, rotated1.x, rotated2.x, rotated3.x, rotated4.x);\n            bounding.bottom = Math.max(bounding.bottom, rotated1.y, rotated2.y, rotated3.y, rotated4.y);\n            bounding.left = Math.min(bounding.left, rotated1.x, rotated2.x, rotated3.x, rotated4.x);\n        }\n\n        return {\n            top: bounding.top + this.y,\n            right: bounding.right + this.x,\n            bottom: bounding.bottom + this.y,\n            left: bounding.left + this.x,\n            x: bounding.left + this.x,\n            y: bounding.top + this.y,\n            width: bounding.right - bounding.left,\n            height: bounding.bottom - bounding.top,\n        };\n    }\n\n    /**\n     * Add a layer to the shape.\n     * @param {callback} callback The callback to generate the path.\n     * @param {Boolean} [contour=false] Whether the path is contoured.\n     * @return {Shape} The Shape.\n     */\n    layer(callback, contour = false) {\n        const path = new Path(this._context);\n        callback(path);\n\n        this.layers.push({\n            contour,\n            path,\n        });\n\n        return this;\n    }\n\n    /**\n     * Render the shape.\n     * @param {object} options The rendering options.\n     * @return {HTMLCanvasElement} The rendered canvas.\n     */\n    render(options = {}) {\n        const canvas = document.createElement('canvas');\n\n        if (!this.layers.length) {\n            return canvas;\n        }\n\n        let { width, height, x, y } = this.getBoundingBox();\n\n        const lineWidth = Math.max(options.lineWidth, 0);\n\n        if (lineWidth) {\n            width += lineWidth * 2;\n            height += lineWidth * 2;\n            x -= lineWidth;\n            y -= lineWidth;\n        }\n\n        const context = canvas.getContext('2d');\n\n        canvas.setAttribute('width', width);\n        canvas.setAttribute('height', height);\n\n        context.translate(this.x - x, this.y - y);\n        context.translate(this.anchorX, this.anchorY);\n        context.rotate(this.angle);\n        context.translate(-this.anchorX, -this.anchorY);\n\n        for (const { contour, path } of this.layers) {\n            let { x: layerX, y: layerY } = path.getBoundingBox();\n\n            let layerOptions;\n            if (contour) {\n                context.globalCompositeOperation = 'destination-out';\n                layerOptions = {\n                    ...options,\n                    fillStyle: '#000',\n                };\n            } else {\n                context.globalCompositeOperation = 'source-over';\n                layerOptions = options;\n\n                if (lineWidth) {\n                    layerX -= lineWidth;\n                    layerY -= lineWidth;\n                }\n            }\n\n            const layerCanvas = path.render(layerOptions);\n\n            context.drawImage(layerCanvas, layerX, layerY);\n        }\n\n        return canvas;\n    }\n\n    /**\n     * Rotate a point around the anchor.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {Vector} The rotated Vector.\n     */\n    _rotatePoint(x, y) {\n        const anchor = Vector.create(this.anchorX, this.anchorY);\n\n        return Vector.create(x, y)\n            .sub(anchor)\n            .rotate(this.angle)\n            .add(anchor);\n    }\n}\n","import Path from './../path/path.js';\nimport Shape from './../shape/shape.js';\n\n/**\n * CanvasContext\n */\nexport default class CanvasContext {\n    /**\n     * New CanvasContext constructor.\n     * @param {HTMLCanvasElement} node The canvas node.\n     * @param {number} [width=600] The canvas width.\n     * @param {number} [height=400] The canvas height.\n     * @param {object} [options] The canvas options.\n     */\n    constructor(node, width = 600, height = 400, options = {}) {\n        this._node = node;\n        this._context = this._node.getContext('2d');\n\n        this._options = {\n            ...this.constructor.defaults,\n            options,\n        };\n\n        this._states = [];\n        this._hasVertex = false;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Apply a matrix transform.\n     * @param {number} a The horizontal scaling amount.\n     * @param {number} b The vertical skewing.\n     * @param {number} c The horizontal skewing.\n     * @param {number} d The vertical scaling amount.\n     * @param {number} e The horizontal translation.\n     * @param {number} f The vertical translation.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    applyMatrix(a, b, c, d, e, f) {\n        this._context.transform(a, b, c, d, e, f);\n\n        return this;\n    }\n\n    /**\n     * Fill the entire canvas with a color.\n     * @param {string|CanvasGradient} color The color/gradient.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    background(color) {\n        return this.push()\n            .noStroke()\n            .fill(color)\n            .rect(0, 0, this.width, this.height)\n            .pop();\n    }\n\n    /**\n     * Clear the entire canvas.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    clear() {\n        this._context.clearRect(0, 0, this.width, this.height);\n\n        return this;\n    }\n\n    /**\n     * Create a new Shape.\n     * @param {number} [x=0] The global X position.\n     * @param {number} [y=0] The global Y position.\n     * @param {number} [angle=0] The rotation angle.\n     * @param {number} [anchorX=0] The anchor X position.\n     * @param {number} [anchorY=0] The anchor Y position.\n     * @return {Shape} The Shape.\n     */\n    createShape(x = 0, y = 0, angle = 0, anchorX = 0, anchorY = 0) {\n        return new Shape(this._context, x, y, angle, anchorX, anchorY);\n    }\n\n    /**\n     * Create a new Path.\n     * @return {Path} The Path.\n     */\n    createPath() {\n        return new Path(this._context);\n    }\n\n    /**\n     * Draw an image on the canvas.\n     * @param {HTMLImageElement|SVGImageElement|HTMLVideoElement|HTMLCanvasElement|ImageBitmap|OffscreenCanvas|VideoFrame} image The image.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    drawImage(image, x = 0, y = 0) {\n        this._context.drawImage(image, x, y);\n\n        return this;\n    }\n\n    /**\n     * Draw a Path on the canvas.\n     * @param {Path} path The Path.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    drawPath(path, x = 0, y = 0) {\n        const bounds = path.getBoundingBox();\n        const canvas = path.render(this._options);\n\n        return this.drawImage(canvas, bounds.x + x, bounds.y + y);\n    }\n\n    /**\n     * Draw a Shape on the canvas.\n     * @param {Shape} shape The Shape.\n     * @param {number} x The X position.\n     * @param {number} y The Y position.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    drawShape(shape, x = 0, y = 0) {\n        let { x: shapeX, y: shapeY } = shape.getBoundingBox();\n\n        const lineWidth = Math.max(this._options.lineWidth, 0);\n\n        if (lineWidth) {\n            shapeX -= lineWidth;\n            shapeY -= lineWidth;\n        }\n\n        const canvas = shape.render(this._options);\n\n        return this.drawImage(canvas, shapeX + x, shapeY + y);\n    }\n\n    /**\n     * Erase a path from the Canvas.\n     * @param {callback} callback The callback to generate the path.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    erase(callback) {\n        const path = this.createPath();\n        callback(path);\n\n        this.push();\n\n        this._context.globalCompositeOperation = 'destination-out';\n\n        return this\n            .reset()\n            .fill('#000')\n            .drawPath(path)\n            .pop();\n    }\n\n    /**\n     * Get the canvas image data.\n     * @param {number} sx The X offset.\n     * @param {number} sy The Y offset.\n     * @param {number} sw The width.\n     * @param {number} sh The height.\n     * @return {ImageData} The image data.\n     */\n    getImage(sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    }\n\n    /**\n     * Restore the previous canvas settings and transformation.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    pop() {\n        if (this._states.length) {\n            this._options = this._states.pop();\n            this._context.restore();\n        }\n\n        return this;\n    }\n\n    /**\n     * Save the canvas settings and transformation.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    push() {\n        this._states.push({ ...this._options });\n        this._context.save();\n\n        return this;\n    }\n\n    /**\n     * Put image data on the canvas.\n     * @param {ImageData} image The image data.\n     * @param {number} dx The X position.\n     * @param {number} dy The Y  position.\n     * @param {number} dirtyX The X offset.\n     * @param {number} dirtyY The Y offset.\n     * @param {number} dirtyWidth The width.\n     * @param {number} dirtyHeight The height.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    putImage(image, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {\n        if (arguments.length > 3) {\n            this._context.putImageData(image, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n        } else {\n            this._context.putImageData(image, dx, dy);\n        }\n\n        return this;\n    }\n\n    /**\n     * Reset the canvas settings and transformation.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    reset() {\n        this._options = this.constructor.defaults;\n\n        return this.resetMatrix();\n    }\n\n    /**\n     * Reset the canvas transformation matrix.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    resetMatrix() {\n        this._context.resetTransform();\n\n        return this;\n    }\n\n    /**\n     * Resize the canvas.\n     * @param {number} w The width.\n     * @param {number} h The height.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    resize(w, h) {\n        this.width = w;\n        this.height = h;\n        this._node.setAttribute('width', this.width);\n        this._node.setAttribute('height', this.height);\n\n        return this;\n    }\n\n    /**\n     * Rotate the canvas.\n     * @param {number} angle The rotation angle.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    rotate(angle) {\n        this._context.rotate(angle);\n\n        return this;\n    }\n\n    /**\n     * Scale the canvas.\n     * @param {number} x The horizontal scaling.\n     * @param {number} [y] The vertical scaling.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    scale(x, y = null) {\n        if (y === undefined) {\n            y = x;\n        }\n\n        this._context.scale(x, y);\n\n        return this;\n    }\n\n    /**\n     * Translate the canvas origin.\n     * @param {number} x The X offset.\n     * @param {number} y The Y offset.\n     * @return {CanvasContext} The CanvasContext.\n     */\n    translate(x, y) {\n        this._context.translate(x, y);\n\n        return this;\n    }\n}\n","import CanvasContext from './canvas-context.js';\nimport { fill, font, fontSize, fontWeight, noFill, noShadow, noStroke, shadow, shadowBlur, shadowOffset, stroke, strokeWidth, text, textAlign, _draw, _updateContext } from './prototype/draw.js';\nimport { linearGradient, radialGradient } from './prototype/gradient.js';\nimport { begin, bezierVertex, curveVertex, end, quadraticVertex, vertex } from './prototype/path.js';\nimport { arc, bezier, circle, curve, ellipse, line, point, quad, rect, square, triangle } from './prototype/primitive.js';\n\n// CanvasContext default options\nCanvasContext.defaults = {\n    fillStyle: null,\n    font: 'sans-serif',\n    fontSize: 10,\n    fontWeight: null,\n    lineWidth: 1,\n    shadowBlur: 0,\n    shadowColor: null,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    strokeStyle: '#000',\n};\n\n// CanvasContext prototype\nconst proto = CanvasContext.prototype;\n\nproto.arc = arc;\nproto.begin = begin;\nproto.bezier = bezier;\nproto.bezierVertex = bezierVertex;\nproto.circle = circle;\nproto.curve = curve;\nproto.curveVertex = curveVertex;\nproto.ellipse = ellipse;\nproto.end = end;\nproto.fill = fill;\nproto.font = font;\nproto.fontSize = fontSize;\nproto.fontWeight = fontWeight;\nproto.line = line;\nproto.linearGradient = linearGradient;\nproto.noFill = noFill;\nproto.noShadow = noShadow;\nproto.noStroke = noStroke;\nproto.point = point;\nproto.quad = quad;\nproto.quadraticVertex = quadraticVertex;\nproto.radialGradient = radialGradient;\nproto.rect = rect;\nproto.shadow = shadow;\nproto.shadowBlur = shadowBlur;\nproto.shadowOffset = shadowOffset;\nproto.square = square;\nproto.stroke = stroke;\nproto.strokeWidth = strokeWidth;\nproto.text = text;\nproto.textAlign = textAlign;\nproto.triangle = triangle;\nproto.vertex = vertex;\nproto._draw = _draw;\nproto._updateContext = _updateContext;\n\nexport default CanvasContext;\n","/**\n * Draw an arc.\n * @param {number} x The X position of the arc center.\n * @param {number} y The Y position of the arc center.\n * @param {number} radius The arc radius.\n * @param {number} startAngle The arc start angle.\n * @param {number} endAngle The arc end angle.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function arc(x, y, radius, startAngle, endAngle) {\n    this.begin();\n\n    this._context.arc(x, y, radius, startAngle, endAngle);\n\n    return this.end();\n};\n\n/**\n * Draw a bezier curve.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} x2 The end X position.\n * @param {number} y2 The end Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function bezier(x1, y1, cx1, cy1, cx2, cy2, x2, y2) {\n    return this.begin()\n        .vertex(x1, y1)\n        .bezierVertex(cx1, cy1, cx2, cy2, x2, y2)\n        .end();\n};\n\n/**\n * Draw a circle.\n * @param {number} x The X position of the circle center.\n * @param {number} y The Y position of the circle center.\n * @param {number} radius The circle radius.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function circle(x, y, radius) {\n    return this.ellipse(x, y, radius * 2, radius * 2);\n};\n\n/**\n * Draw a curve.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} radius The arc radius.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function curve(x1, y1, cx1, cy1, cx2, cy2, radius) {\n    return this.begin()\n        .vertex(x1, y1)\n        .curveVertex(cx1, cy1, cx2, cy2, radius)\n        .end();\n};\n\n/**\n * Draw an ellipse.\n * @param {number} x The X position of the ellipse center.\n * @param {number} y The Y position of the ellipse center.\n * @param {number} width The ellipse width.\n * @param {number} height The ellipse height.\n * @param {number} [angle=0] The ellipse angle.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function ellipse(x, y, width, height, angle = 0) {\n    this.begin();\n\n    this._context.ellipse(x, y, width / 2, height / 2, angle, 0, Math.PI * 2);\n\n    return this.end();\n};\n\n/**\n * Draw a line.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} x2 The end X position.\n * @param {number} y2 The end Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function line(x1, y1, x2, y2) {\n    return this.begin()\n        .vertex(x1, y1)\n        .vertex(x2, y2)\n        .end();\n};\n\n/**\n * Draw a point.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function point(x, y) {\n    const { lineWidth, strokeStyle } = this._options;\n\n    return this.push()\n        .noStroke()\n        .fill(strokeStyle)\n        .circle(x, y, lineWidth)\n        .pop();\n};\n\n/**\n * Draw a quadratic.\n * @param {number} x1 The first X position.\n * @param {number} y1 The first Y position.\n * @param {number} x2 The second X position.\n * @param {number} y2 The second Y position.\n * @param {number} x3 The third X position.\n * @param {number} y3 The third Y position.\n * @param {number} x4 The fourth X position.\n * @param {number} y4 The fourth Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function quad(x1, y1, x2, y2, x3, y3, x4, y4) {\n    return this.begin()\n        .vertex(x1, y1)\n        .vertex(x2, y2)\n        .vertex(x3, y3)\n        .vertex(x4, y4)\n        .end(true);\n};\n\n/**\n * Draw a rectangle.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @param {number} width The rectangle width.\n * @param {number} height The rectangle height.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function rect(x, y, width, height) {\n    this.begin();\n\n    this._context.rect(x, y, width, height);\n\n    return this.end();\n};\n\n/**\n * Draw a square.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @param {number} size The square size.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function square(x, y, size) {\n    return this.rect(x, y, size, size);\n};\n\n/**\n * Draw a triangle.\n * @param {number} x1 The first X position.\n * @param {number} y1 The first Y position.\n * @param {number} x2 The second X position.\n * @param {number} y2 The second Y position.\n * @param {number} x3 The third X position.\n * @param {number} y3 The third Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function triangle(x1, y1, x2, y2, x3, y3) {\n    return this.begin()\n        .vertex(x1, y1)\n        .vertex(x2, y2)\n        .vertex(x3, y3)\n        .end(true);\n};\n","/**\n * Begin a path.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function begin() {\n    this._context.beginPath();\n    this._hasVertex = false;\n\n    return this;\n};\n\n/**\n * Add a bezier vertex.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function bezierVertex(cx1, cy1, cx2, cy2, x, y) {\n    this._context.bezierCurveTo(cx1, cy1, cx2, cy2, x, y);\n\n    return this;\n};\n\n/**\n * Add a curve vertex.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} radius The arc radius.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function curveVertex(cx1, cy1, cx2, cy2, radius) {\n    this._context.arcTo(cx1, cy1, cx2, cy2, radius);\n\n    return this;\n};\n\n/**\n * End and draw the path.\n * @param {Boolean} [close=false] Whether to close the path.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function end(close = false) {\n    if (close) {\n        this._context.closePath();\n    }\n\n    this._draw();\n\n    return this;\n};\n\n/**\n * Add a quadtraic vertex.\n * @param {number} cx The control point X position.\n * @param {number} cy The control point Y position.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function quadraticVertex(cx, cy, x, y) {\n    this._context.quadraticCurveTo(cx, cy, x, y);\n\n    return this;\n};\n\n/**\n * Add a vertex.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function vertex(x, y) {\n    if (!this._hasVertex) {\n        this._context.moveTo(x, y);\n        this._hasVertex = true;\n    } else {\n        this._context.lineTo(x, y);\n    }\n\n    return this;\n};\n","/**\n * Set the fill color/style.\n * @param {string|CanvasGradient} color The color/gradient.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function fill(color) {\n    this._options.fillStyle = color;\n\n    return this;\n};\n\n/**\n * Set the font family.\n * @param {string} font The font family.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function font(font) {\n    this._options.font = font;\n\n    return this;\n};\n\n/**\n * Set the font size.\n * @param {number} size The font size.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function fontSize(size) {\n    this._options.fontSize = size;\n\n    return this;\n};\n\n/**\n * Set the font weight.\n * @param {string|number} weight The font weight.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function fontWeight(weight) {\n    this._options.fontWeight = weight;\n\n    return this;\n};\n\n/**\n * Remove the fill color/style.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function noFill() {\n    this._options.fillStyle = null;\n\n    return this;\n};\n\n/**\n * Remove the shadow.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function noShadow() {\n    this._options.shadowColor = 'rgba(0,0,0,0)';\n\n    return this;\n};\n\n/**\n * Remove the stroke.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function noStroke() {\n    this._options.strokeStyle = null;\n\n    return this;\n};\n\n/**\n * Set the shadow color.\n * @param {string|CanvasGradient} color The color.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function shadow(color) {\n    this._options.shadowColor = color;\n\n    return this;\n};\n\n/**\n * Set the shadow blur amount.\n * @param {number} amount The blur amount.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function shadowBlur(amount) {\n    this._options.shadowBlur = amount;\n\n    return this;\n};\n\n/**\n * Set the shadow x/y offset.\n * @param {number} [x=0] The X offset.\n * @param {number} [y=0] The Y offset.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function shadowOffset(x = 0, y = 0) {\n    this._options.shadowOffsetX = x;\n    this._options.shadowOffsetY = y;\n\n    return this;\n};\n\n/**\n * Set the stroke color/style.\n * @param {string|CanvasGradient} color The color/gradient.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function stroke(color) {\n    this._options.strokeStyle = color;\n\n    return this;\n};\n\n/**\n * Set the stroke width.\n * @param {number} width The width.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function strokeWidth(width) {\n    this._options.lineWidth = width;\n\n    return this;\n};\n\n/**\n * Draw text to the canvas.\n * @param {string} text The text to draw.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function text(text, x, y) {\n    this._updateContext();\n\n    const font = [];\n\n    if (this._options.fontWeight) {\n        font.push(this._options.fontWeight);\n    }\n\n    font.push(`${this._options.fontSize}px`);\n    font.push(this._options.font);\n\n    this._context.font = font.join(' ');\n    this._context.textAlign = this._options.textAlign;\n\n    if (this._options.fillStyle) {\n        this._context.fillText(text, x, y);\n    }\n\n    if (this._options.strokeStyle) {\n        this._context.strokeText(text, x, y);\n    }\n\n    return this;\n};\n\n/**\n * Set the text alignment.\n * @param {string} aligment The text alignment.\n * @return {CanvasContext} The CanvasContext.\n */\nexport function textAlign(aligment) {\n    this._options.textAlign = aligment;\n\n    return this;\n};\n\n/**\n * Draw to the canvas.\n */\nexport function _draw() {\n    this._updateContext();\n\n    if (this._options.fillStyle) {\n        this._context.fill();\n    }\n\n    if (this._options.strokeStyle) {\n        this._context.stroke();\n    }\n};\n\n/**\n * Update the canvas context.\n */\nexport function _updateContext() {\n    this._context.fillStyle = this._options.fillStyle;\n    this._context.lineWidth = this._options.lineWidth;\n    this._context.shadowBlur = this._options.shadowBlur;\n    this._context.shadowColor = this._options.shadowColor;\n    this._context.shadowOffsetX = this._options.shadowOffsetX;\n    this._context.shadowOffsetY = this._options.shadowOffsetY;\n    this._context.strokeStyle = this._options.strokeStyle;\n}\n","/**\n * Create a linear gradient.\n * @param {number} x1 The starting X position.\n * @param {number} y1 The starting Y position.\n * @param {number} x2 The ending X position.\n * @param {number} y2 The ending Y position.\n * @return {CanvasGradient} The CanvasGradient.\n */\nexport function linearGradient(x1, y1, x2, y2) {\n    return this._context.createLinearGradient(x1, y1, x2, y2);\n};\n\n/**\n * Create a radial gradient.\n * @param {number} x1 The starting X position.\n * @param {number} y1 The starting Y position.\n * @param {number} r1 Th starting radius.\n * @param {number} x2 The ending X position.\n * @param {number} y2 The ending Y position.\n * @param {number} r2 Th ending radius.\n * @return {CanvasGradient} The CanvasGradient.\n */\nexport function radialGradient(x1, y1, r1, x2, y2, r2) {\n    return this._context.createRadialGradient(x1, y1, r1, x2, y2, r2);\n};\n","import Path from './path.js';\nimport { bezierVertex, close, curveVertex, quadraticVertex, vertex } from './prototype/path.js';\nimport { arc, bezier, circle, curve, ellipse, line, quad, rect, square, triangle } from './prototype/primitive.js';\n\n// Path prototype\nconst proto = Path.prototype;\n\nproto.arc = arc;\nproto.bezier = bezier;\nproto.bezierVertex = bezierVertex;\nproto.circle = circle;\nproto.close = close;\nproto.curve = curve;\nproto.curveVertex = curveVertex;\nproto.ellipse = ellipse;\nproto.line = line;\nproto.quad = quad;\nproto.quadraticVertex = quadraticVertex;\nproto.rect = rect;\nproto.square = square;\nproto.triangle = triangle;\nproto.vertex = vertex;\n\nexport default Path;\n","/**\n * Add an arc.\n * @param {number} x The X position of the arc center.\n * @param {number} y The Y position of the arc center.\n * @param {number} radius The arc radius.\n * @param {number} startAngle The arc start angle.\n * @param {number} endAngle The arc end angle.\n * @return {Path} The Path.\n */\nexport function arc(x, y, radius, startAngle, endAngle) {\n    this._path.arc(x, y, radius, startAngle, endAngle);\n\n    this._setBounds([x - radius, x + radius], [y - radius, y + radius]);\n\n    return this;\n};\n\n/**\n * Add a bezier curve.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} x2 The end X position.\n * @param {number} y2 The end Y position.\n * @return {Path} The Path.\n */\nexport function bezier(x1, y1, cx1, cy1, cx2, cy2, x2, y2) {\n    this._path.moveTo(x1, y1);\n    this._path.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);\n\n    this._setBounds([x1, cx1, cx2, x2], [y1, cy1, cy2, y2]);\n\n    return this;\n};\n\n/**\n * Add a circle.\n * @param {number} x The X position of the circle center.\n * @param {number} y The Y position of the circle center.\n * @param {number} radius The circle radius.\n * @return {Path} The Path.\n */\nexport function circle(x, y, radius) {\n    return this.ellipse(x, y, radius * 2, radius * 2);\n};\n\n/**\n * Add a curve.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} radius The arc radius.\n * @return {Path} The Path.\n */\nexport function curve(x1, y1, cx1, cy1, cx2, cy2, radius) {\n    this._path.moveTo(x1, y1);\n    this._path.arcTo(cx1, cy1, cx2, cy2, radius);\n\n    this._setBounds([x1, cx1, cx2], [y1, cy1, cy2]);\n\n    return this;\n};\n\n/**\n * Add an ellipse.\n * @param {number} x The X position of the ellipse center.\n * @param {number} y The Y position of the ellipse center.\n * @param {number} width The ellipse width.\n * @param {number} height The ellipse height.\n * @param {number} [angle=0] The ellipse angle.\n * @return {Path} The Path.\n */\nexport function ellipse(x, y, width, height, angle = 0) {\n    const xRadius = width / 2;\n    const yRadius = height / 2;\n\n    this._path.ellipse(x, y, xRadius, yRadius, angle, 0, Math.PI * 2);\n\n    this._setBounds([x - xRadius, x + xRadius], [y - yRadius, y + yRadius]);\n\n    return this;\n};\n\n/**\n * Add a line.\n * @param {number} x1 The start X position.\n * @param {number} y1 The start Y position.\n * @param {number} x2 The end X position.\n * @param {number} y2 The end Y position.\n * @return {Path} The Path.\n */\nexport function line(x1, y1, x2, y2) {\n    this._path.moveTo(x1, y1);\n    this._path.lineTo(x2, y2);\n\n    this._setBounds([x1, x2], [y1, y2]);\n\n    return this;\n};\n\n/**\n * Add a quadratic.\n * @param {number} x1 The first X position.\n * @param {number} y1 The first Y position.\n * @param {number} x2 The second X position.\n * @param {number} y2 The second Y position.\n * @param {number} x3 The third X position.\n * @param {number} y3 The third Y position.\n * @param {number} x4 The fourth X position.\n * @param {number} y4 The fourth Y position.\n * @return {Path} The Path.\n */\nexport function quad(x1, y1, x2, y2, x3, y3, x4, y4) {\n    this._path.moveTo(x1, y1);\n    this._path.lineTo(x2, y2);\n    this._path.lineTo(x3, y3);\n    this._path.lineTo(x4, y4);\n    this._path.closePath();\n\n    this._setBounds([x1, x2, x3, x4], [y1, y2, y3, y4]);\n\n    return this;\n};\n\n/**\n * Add a rectangle.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @param {number} width The rectangle width.\n * @param {number} height The rectangle height.\n * @return {Path} The Path.\n */\nexport function rect(x, y, width, height) {\n    this._path.rect(x, y, width, height);\n\n    this._setBounds([x, x + width], [y, y + height]);\n\n    return this;\n};\n\n/**\n * Add a square.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @param {number} size The square size.\n * @return {Path} The Path.\n */\nexport function square(x, y, size) {\n    return this.rect(x, y, size, size);\n};\n\n/**\n * Add a triangle.\n * @param {number} x1 The first X position.\n * @param {number} y1 The first Y position.\n * @param {number} x2 The second X position.\n * @param {number} y2 The second Y position.\n * @param {number} x3 The third X position.\n * @param {number} y3 The third Y position.\n * @return {Path} The Path.\n */\nexport function triangle(x1, y1, x2, y2, x3, y3) {\n    this._path.moveTo(x1, y1);\n    this._path.lineTo(x2, y2);\n    this._path.lineTo(x3, y3);\n    this._path.closePath();\n\n    this._setBounds([x1, x2, x3], [y1, y2, y3]);\n\n    return this;\n};\n","/**\n * Add a bezier vertex.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {Path} The Path.\n */\nexport function bezierVertex(cx1, cy1, cx2, cy2, x, y) {\n    this._path.bezierCurveTo(cx1, cy1, cx2, cy2, x, y);\n\n    this._setBounds([cx1, cx2, x], [cy1, cy2, y]);\n\n    return this;\n};\n\n/**\n * Close the path.\n * @return {Path} The Path.\n */\nexport function close() {\n    this._path.closePath();\n\n    return this;\n};\n\n/**\n * Add a curve vertex.\n * @param {number} cx1 The first control point X position.\n * @param {number} cy1 The first control point Y position.\n * @param {number} cx2 The second control point X position.\n * @param {number} cy2 The second control point Y position.\n * @param {number} radius The arc radius.\n * @return {Path} The Path.\n */\nexport function curveVertex(cx1, cy1, cx2, cy2, radius) {\n    this._path.arcTo(cx1, cy1, cx2, cy2, radius);\n\n    this._setBounds([cx1, cx2], [cy1, cy2]);\n\n    return this;\n};\n\n/**\n * Add a quadtraic vertex.\n * @param {number} cx The control point X position.\n * @param {number} cy The control point Y position.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {Path} The Path.\n */\nexport function quadraticVertex(cx, cy, x, y) {\n    this._path.quadraticCurveTo(cx, cy, x, y);\n\n    this._setBounds([cx, x], [cy, y]);\n\n    return this;\n};\n\n/**\n * Add a vertex.\n * @param {number} x The X position.\n * @param {number} y The Y position.\n * @return {Path} The Path.\n */\nexport function vertex(x, y) {\n    if (!this._hasVertex) {\n        this._path.moveTo(x, y);\n        this._hasVertex = true;\n    } else {\n        this._path.lineTo(x, y);\n    }\n\n    this._setBounds([x], [y]); ;\n\n    return this;\n};\n","import CanvasContext from './../canvas-context/canvas-context.js';\nimport Vector from './../vector/vector.js';\n\n/**\n * Canvas\n */\nexport default class Canvas {\n    /**\n     * New Canvas constructor.\n     * @param {HTMLCanvasElement} node The canvas node.\n     * @param {number} [width=600] The canvas width.\n     * @param {number} [height=400] The canvas height.\n     */\n    constructor(node, width = 600, height = 400) {\n        this._node = node;\n\n        this._loop = true;\n        this._mouseX = null;\n        this._mouseY = null;\n        this._mouseDown = {};\n        this._keysDown = {};\n\n        this.context = new CanvasContext(this._node, width, height);\n\n        this._node.setAttribute('tabindex', '1');\n        this._node.style.setProperty('outline', '0');\n\n        this._events();\n        this.setup();\n\n        const start = Date.now();\n\n        const run = (_) => {\n            const now = Date.now();\n            const delta = (now - start) / 1000;\n\n            this.update(delta);\n\n            if (!this._loop) {\n                return;\n            }\n\n            window.requestAnimationFrame(run);\n        };\n\n        run();\n    }\n\n    /**\n     * Determine if a key is being pressed.\n     * @param {string} code The key code.\n     * @return {Boolean} TRUE if the key is being pressed, otherwise FALSE.\n     */\n    isKeyPressed(code) {\n        return code ?\n            code in this._keysDown :\n            Object.keys(this._keysDown).length;\n    }\n\n    /**\n     * Determine if a mouse button is being pressed.\n     * @param {number} button The mouse button.\n     * @return {Boolean} TRUE if the mouse button is being pressed, otherwise FALSE.\n     */\n    isMousePressed(button = 0) {\n        return button in this._mouseDown && this._mouseX !== null && this._mouseY !== null;\n    }\n\n    /**\n     * Get the mouse position.\n     * @return {Vector|null} The mouse position.\n     */\n    mousePos() {\n        if (this._mouseX === null || this._mouseY === null) {\n            return null;\n        }\n\n        return new Vector(this._mouseX, this._mouseY);\n    }\n\n    /**\n     * Stop the update method.\n     */\n    noLoop() {\n        this._loop = false;\n    }\n\n    /**\n     * Key down callback.\n     */\n    onKeyDown() {\n\n    }\n\n    /**\n     * Key press callback.\n     */\n    onKeyPress() {\n\n    }\n\n    /**\n     * Key up callback.\n     */\n    onKeyUp() {\n\n    }\n\n    /**\n     * Mouse click callback.\n     */\n    onMouseClick() {\n\n    }\n\n    /**\n     * Mouse down callback.\n     */\n    onMouseDown() {\n\n    }\n\n    /**\n     * Mouse enter callback.\n     */\n    onMouseEnter() {\n\n    }\n\n    /**\n     * Mouse leave callback.\n     */\n    onMouseLeave() {\n\n    }\n\n    /**\n     * Mouse move callback.\n     */\n    onMouseMove() {\n\n    }\n\n    /**\n     * Mouse up callback.\n     */\n    onMouseUp() {\n\n    }\n\n    /**\n     * Setup callback.\n     */\n    setup() {\n\n    }\n\n    /**\n     * Update callback.\n     */\n    update() {\n\n    }\n\n    /**\n     * Attach events for the Canvas.\n     */\n    _events() {\n        const updateMouse = (e) => {\n            this._mouseX = e.offsetX;\n            this._mouseY = e.offsetY;\n        };\n\n        this._node.addEventListener('mouseenter', (e) => {\n            updateMouse(e);\n\n            this.onMouseEnter(e);\n        });\n\n        this._node.addEventListener('mouseleave', (e) => {\n            updateMouse(e);\n\n            this.onMouseLeave(e);\n\n            this._mouseX = null;\n            this._mouseY = null;\n        });\n\n        this._node.addEventListener('mousemove', (e) => {\n            updateMouse(e);\n\n            this.onMouseMove(this._mouseX, this._mouseY, e);\n        });\n\n        this._node.addEventListener('mousedown', (e) => {\n            this._mouseDown[e.button] = true;\n\n            updateMouse(e);\n\n            this.onMouseDown(e.button, e);\n\n            window.addEventListener('mouseup', (e) => {\n                delete this._mouseDown[e.button];\n\n                updateMouse(e);\n\n                this.onMouseUp(e.button, e);\n            }, {\n                once: true,\n            });\n        });\n\n        this._node.addEventListener('click', (e) => {\n            updateMouse(e);\n\n            this.onMouseClick(e.button, e);\n        });\n\n        this._node.addEventListener('keydown', (e) => {\n            this._keysDown[e.code] = true;\n\n            this.onKeyDown(e.code, e);\n\n            window.addEventListener('keyup', (e) => {\n                delete this._keysDown[e.code];\n\n                this.onKeyUp(e.code, e);\n            }, {\n                once: true,\n            });\n        });\n\n        this._node.addEventListener('keypress', (e) => {\n            this.onKeyPress(e.code, e);\n        });\n    }\n\n    /**\n     * Create a new Canvas with a new canvas element.\n     * @param {HTMLElement} [parent] The parent node.\n     * @param {number} [width=600] The canvas width.\n     * @param {number} [height=400] The canvas height.\n     * @return {Canvas} A new Canvas object.\n     */\n    static attach(parent = document.body, width = 600, height = 400) {\n        const canvas = document.createElement('canvas');\n\n        parent.append(canvas);\n\n        return new this(canvas, width, height);\n    }\n}\n"],"mappings":"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","ignoreList":[]}